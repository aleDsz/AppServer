//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharpBoss.Tests.Fixtures.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class WebServerTemplate : WebServerTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 ""
            this.Write("using System;\nusing System.Text;\n\nusing SharpBoss;\nusing SharpBoss.Models;\nusing " +
                    "SharpBoss.Attributes;\nusing SharpBoss.Attributes.Methods;\n\nnamespace ");
            
            #line default
            #line hidden
            
            #line 14 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 14 ""
            this.Write(" {\n  public class ");
            
            #line default
            #line hidden
            
            #line 15 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 15 ""
            this.Write("Model {\n    public string name;\n    public int count;\n    public string test;\n  }" +
                    "\n  \n  public class ");
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write("Processor {\n    public string Name () {\n      return typeof(");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write("Processor).Name;\n    }\n\n    public ");
            
            #line default
            #line hidden
            
            #line 26 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 26 ""
            this.Write("Model AddCount (");
            
            #line default
            #line hidden
            
            #line 26 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 26 ""
            this.Write("Model model, int count) {\n      model.count += count;\n      return model;\n    }\n " +
                    " }\n  \n  public class ");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("CustomException: Exception {\n    public ");
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write("CustomException(string message) : base(message) { }\n  }\n  \n  [RestExceptionHandle" +
                    "r (typeof(");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("CustomException))]\n  public class ");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("ExceptionHandler : IRestExceptionHandler {\n    public RestResponse HandleExceptio" +
                    "n (Exception e) {\n      ");
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write("CustomException ce = (");
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write(@"CustomException)e;

      var result = new RestResponse ();
      result.ContentType = ""text/plain"";
      result.StatusCode = System.Net.HttpStatusCode.NotAcceptable;
      result.Result = Encoding.UTF8.GetBytes(""Handling CustomException that has a message: "" + ce.Message);

      return result;
    }
  }
  
  [REST(""/api"")]
  public class ");
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write("RestClass {\n    [Inject]\n    private ");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(@"Processor myInjectedProc = null;

    [GET(""/test"")]
    public string hueTest ([QueryParam] string param0, [QueryParam] float param1) {
      return ""GET TO HUEHUE with param: Param0("" + param0 + ""), Param1("" + param1 +"")"";
    }

    [GET(""/inject-test"")]
    public string injTest () {
      return myInjectedProc.Name ();
    }

    [POST(""/inject-test"")]
    public ");
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write("Model injTestPost (");
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write("Model model) {\n      return myInjectedProc.AddCount (model, 20);\n    }\n\n    [POST" +
                    "(\"/test\")]\n    public ");
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write("Model hueTest2 (");
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write("Model model) {\n      model.count += 100;\n      return model;\n    }\n\n    [GET(\"/ex" +
                    "ception-test\")]\n    public ");
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write("Model exceptionTest () {\n      throw new NullReferenceException (\"Test of an Exce" +
                    "ption\");\n    }\n\n    [GET(\"/custom-exception-test\")]\n    public ");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write("Model customExceptionTest () {\n      throw new ");
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Class ));
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write("CustomException (\"NOOOOOOOOOOOOOOOOOOOOO!\");\n    }\n  }\n}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class WebServerTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
